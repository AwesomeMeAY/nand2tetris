CHALLENGE:
	write an assembler in shell and in python
Basic Assembler Logic:
	Repeat, until end-of-file is reached:
		Read the next assembly language command:
			Ignore white space
			Read a line as an array of characters
		Break it into the different fields it is composed of:
		Lookup the binary code for each field 
		Combine these codes into a single machine language command 
		Output this machine language command
Symbols:
	Continue writing later
	Labels:
		Forward references:
			Label called on before defined
			possible solutions:
				leave blank until label appears then fix
				in first pass just figure out all addresses
	Variables:
		Assemblers must replace names with address
		Table with the variable and the address 
Assembly program elements:
	White space / indentation
	Line comments
	In-Line comments
	Instruction
		A-instructions
		C-instructions
	Symbols:
		References 
		Label Declarations
Handling Instructions:
	Translating A-Instructions:
		Symbolic syntax:
			@value
		Binary Syntax:
			0valueInBinary	
		Translation to binary:
			If value is a decimal constant generate the equivalent 15-bit binary constant
	Translating C-instructions
		Symbolic syntax:
			dest = comp ; jump
		Binary Syntax:
			111_a_comp_dest_jump
Handling Symbols:
	Variable symbols:
		Represent memory locations where the programmer wants to maintain values
		Any symbol XXX appearing in an assembly program which is not pre-defined and 
		is not defined elsewhere using the (XXX) directive is treated as a variable
		Each variable is assigned a unique memory address starting at 16	
		
	Label Symbols:
		Represent destinations of GOTO instruction
		Declared by the pseudo-command (XXX)
		This directive defines the symbol XXX to refer to the memory location holding the next instruction in the program
	Pre-Defined symbols:
		Represent special memory locations
	Symbol Table:
		
The assembly process:
	Initiatlization:
		Construct an empty symbol table 
		Add the pre-defined symbols to the symbol table
	First pass:
			Scan the entire program
			For each "instruction" of the form (XXX):
				Add the pair (xxx, address) to the symbol table
				where address is the number of the instruction following (xxx)
	Second Pass:
		Set n to 16
		Scan the entire program again for each instruction:
			If the instruction is @symbol look up symbol in the symbol table;
			If (symbol, value) is found sue value to complete the instruction's translation
			If not found:
				Add (symbol, n) to the symbol table
				Use n to complete the instructions translation
				n++
			If the instruction is a c instruction complete the instructions translation 
			Write the translated instruction to the output file
Sub-tasks that need to be done:
	Reading and parsing commands:
		No need to understand the meaning of anything
	Converting mnemonics -> code
	Handling symbols	
Developing a Hack Assembler:
	Contract:
		HackAssembler program that translates Hack assembly programs into Hack binary code
		The source program is supplied in a text file named Xxx.asm
		The generated code is written into a text file name Xxx.hack
		Assumption:
			Xxx.asm is error free
	Proposed Design:
		The assembler can be implemented in any high-level language
		Proposed software architecture:
			Parser:
				unpacks each instruction into its underlying fields
			Code:
				Translates each field into its corresponding binary value
			SymbolTable:
				Manages the symbol table
			Main:
				Initializes the I/O files and drives the process
	Proposed Implementation:
		Stage development:
			Develop a basic assembler that translates assembly programs without symbols
			Develop an ability to handle symbols
			Morph the basic assembler into an assembler that can translate any assembly program

	
				
	
		
	
		
	
		

	
	 
